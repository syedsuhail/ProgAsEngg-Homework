        -:    0:Source:primebit.c
        -:    0:Graph:primebit.gcno
        -:    0:Data:primebit.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <strings.h>
        -:    4:#include <assert.h>
        -:    5:#include <math.h>
        -:    6:
        -:    7:int SIZE = 10000000/8; /* 10^7 bits*/
        -:    8:
        -:    9:void 
    #####:   10:raw_display(unsigned char *vector)
        -:   11:{
        -:   12:  unsigned char mask;
        -:   13:  int i,j;
    #####:   14:  for (i = SIZE-1; i>=0; i--) {
        -:   15:    /* printf("(%d)",i); */
    #####:   16:    for (j = 7; j>=0; j--) {
    #####:   17:      mask = 1<<j;
    #####:   18:      if (vector[i] & mask)
    #####:   19:        printf("1");
        -:   20:      else
    #####:   21:        printf("0");
        -:   22:    }
    #####:   23:    printf(" ");
        -:   24:  }
    #####:   25:  printf("\n");
    #####:   26:}
        -:   27:
        -:   28:
        -:   29:void 
        1:   30:display(unsigned char *vector,unsigned int n)
        -:   31:{
        -:   32:  unsigned char mask;
        -:   33:  int i,j;
        1:   34:  int num = 0;
        -:   35:  
  1250001:   36:  for (i = SIZE-1; i>=0; i--) {
 11250000:   37:    for (j = 7; j>=0; j--) {
 10000000:   38:      mask = 1<<j;
        -:   39:	
 10000000:   40:      if (vector[i] & mask || (i==SIZE-1 && j==7) || (i==SIZE-1 && j==6))
        -:   41:	{}
        -:   42:	else       
        -:   43:	{
  9751660:   44:	if(num<n) printf("%d\n",num);}
 10000000:   45:      num ++;
        -:   46: }
        -:   47:  }
        1:   48:}
        -:   49:
        -:   50:
        -:   51:void
   998000:   52:set(unsigned char *vector, int number)
        -:   53:{
        -:   54:  int byte;
        -:   55:  int bit;
   998000:   56:  assert (number < SIZE * 8); /* The number we set shouldn't be more
        -:   57:                                 than the number of bits */
   998000:   58:  byte = (SIZE - 1) - (number / 8);
   998000:   59:  bit = 7 - number % 8;
        -:   60:  /* printf("Setting bit %d of byte %d to 1\n", bit, byte); */
        -:   61:  
   998000:   62:  vector[byte] = vector[byte] | 1<<bit;
   998000:   63:}
        -:   64:
        -:   65:void
    #####:   66:unset(unsigned char *vector, int number)
        -:   67:{
        -:   68:  int byte;
        -:   69:  int bit;
    #####:   70:  assert (number < SIZE * 8); /* The number we set shouldn't be more
        -:   71:                                 than the number of bits */
    #####:   72:  byte = (SIZE - 1) - (number / 8);
    #####:   73:  bit = 7 - number % 8;
        -:   74:  /* printf("Unsetting bit %d of byte %d to 1\n", bit, byte); */
        -:   75:  
    #####:   76:  vector[byte] = vector[byte] & (~(1<<bit));
    #####:   77:}
        -:   78:
        -:   79:
        -:   80:int
        1:   81:main(int argc,const char ** argv)
        -:   82:{
        -:   83:  unsigned int n,i;
        -:   84:
        -:   85:  
        1:   86:  unsigned char *vector = (unsigned char *)malloc(SIZE); /* SIZE is int 10000000 == 10^7 */
        1:   87:  bzero(vector, SIZE);
        -:   88:    
        -:   89:  
        1:   90:  n=atoi(argv[1]);
      999:   91:     for(i=2;i<n;i++)
      998:   92:	if(vector[i]==0)
        -:   93:		{
      998:   94:		int j=2;
      998:   95:		int k=1;
   999996:   96:		while(k<=n)
        -:   97:		{
   998000:   98:			set(vector,i*j);
   998000:   99:			j=j+1;
   998000:  100:			k++;
        -:  101:		}
        -:  102:	}
        -:  103:	
        -:  104: 
        1:  105:  display(vector,n);
        -:  106:  
        1:  107:  free(vector);
        1:  108:  return 0;
        -:  109:}
